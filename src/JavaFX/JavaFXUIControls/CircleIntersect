import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Ellipse;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import java.lang.Math;
import javafx.scene.text.Text;

public class CircleIntersect extends Application {
    private Pane root;
    Label cond;
    Ellipse cir1;
    Ellipse cir2;
    
    BorderPane ground;
    
    TextField x1field;
    TextField y1field ;
    TextField x2field;
    TextField y2field ;
    
    @Override
    public void start(Stage primaryStage) {
        
        //Border Pane
        ground = new BorderPane();
        
        //GridPane
        GridPane centerPane = new GridPane();
        centerPane.setAlignment(Pos.CENTER);
        centerPane.setHgap(10);
        centerPane.setVgap(10);

        
        
        // Pane root
        root = new Pane();
        centerPane.add(root,0,0,10,10);
        
        
        
        // 2 circles:
        cir1 = new Ellipse(52,60,30,30);
        cir2 = new Ellipse(180,56,40,40);
        cir1.setFill(Color.TRANSPARENT);
        cir1.setStroke(Color.BLACK);
        cir2.setFill(Color.TRANSPARENT);
        cir2.setStroke(Color.BLACK);
        
        root.getChildren().addAll(cir1,cir2);
        
        //Drag circles
        root.setOnMouseDragged(new DragOnMouse());
        
        
        //Two circles info boxes
        Label enter1 = new Label("Enter circle 1 info:");
        Label centerX1 = new Label("Center x:");
        x1field = new TextField();
        x1field.setText(Double.toString(cir1.getCenterX()));
        x1field.setEditable(true);
        Label centerY1 = new Label("Center y:");
        y1field = new TextField();
        y1field.setText(Double.toString(cir1.getCenterY()));
        y1field.setEditable(true);
        Label radius1 = new Label("Radius: ");
        TextField radius1field = new TextField();
        radius1field.setText(Double.toString(cir1.getRadiusX()));
        radius1field.setEditable(true);
   

        centerPane.add(enter1, 0,15,4,1);
        centerPane.add(centerX1,0,16,2,1);
        centerPane.add(x1field, 2, 16, 2, 1);
        centerPane.add(centerY1,0,17,2,1);
        centerPane.add(y1field, 2, 17, 2, 1);
        centerPane.add(radius1, 0, 18, 2, 1);
        centerPane.add(radius1field, 2, 18, 2, 1);
        
        
        Label enter2 = new Label("Enter circle 2 info:");
        Label centerX2 = new Label("Center x:");
        x2field = new TextField();
        x2field.setText(Double.toString(cir2.getCenterX()));
        x2field.setEditable(true);
        Label centerY2 = new Label("Center y:");
        y2field = new TextField();
        y2field.setText(Double.toString(cir2.getCenterY()));
        y2field.setEditable(true);
        Label radius2 = new Label("Radius: ");
        TextField radius2field = new TextField();
        radius2field.setText(Double.toString(cir2.getRadiusX()));
        radius1field.setEditable(true);
   

        centerPane.add(enter2, 5,15,4,1);
        centerPane.add(centerX2,5,16,2,1);
        centerPane.add(x2field, 7, 16, 2, 1);
        centerPane.add(centerY2,5,17,2,1);
        centerPane.add(y2field, 7, 17, 2, 1);
        centerPane.add(radius2, 5, 18, 2, 1);
        centerPane.add(radius2field, 7, 18, 2, 1);
        
        //Button
        Button redrawbtn = new Button("Redraw Circles");
        redrawbtn.setOnAction((ActionEvent event) -> {
                cir1.setCenterX(52);
                cir1.setCenterY(60);
                
                cir2.setCenterX(180);
                cir2.setCenterY(56);
        });
        ground.setAlignment(redrawbtn, Pos.CENTER);
        
        //Label
        cond = new Label("Two circles intersect?" + Collapes());
        
        ground.setAlignment(cond, Pos.CENTER);
        
        
        ground.setTop(cond);
        ground.setCenter(centerPane);
        ground.setBottom(redrawbtn);
        
        Scene scene = new Scene(ground, 350, 350);
        
        primaryStage.setTitle("Circles intersect");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

    private String Collapes() {
       double x1 = cir1.getCenterX();
       double x2 = cir2.getCenterX();
       double y1 = cir1.getCenterY();
       double y2 = cir2.getCenterY();
       double r1 = cir1.getRadiusX();
       double r2 = cir2.getRadiusX();

       

        double distSq = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
        double radSumSq = (r1 + r2) * (r1 + r2);
        

        if (distSq > radSumSq)
            return " No";
        else
            return " Yes";

    }

    private class DragOnMouse implements EventHandler< MouseEvent> {

        public DragOnMouse() {
        }

        @Override
        public void handle(MouseEvent event) {
            double x = event.getX();
            double y = event.getY();
            if (Math.abs(x-cir1.getCenterX()) < cir1.getRadiusX() && Math.abs(y-cir1.getCenterY()) < cir1.getRadiusY()){
                cir1.setCenterX(x);
                cir1.setCenterY(y);
                x1field.setText(Double.toString(cir1.getCenterX()));
                y1field.setText(Double.toString(cir1.getCenterY())); 

            }
            else if (Math.abs(x-cir2.getCenterX()) < cir2.getRadiusX() && Math.abs(y-cir2.getCenterY()) < cir2.getRadiusY()){
                cir2.setCenterX(x);
                cir2.setCenterY(y);
                
                x2field.setText(Double.toString(cir2.getCenterX()));
                y2field.setText(Double.toString(cir2.getCenterY()));

            }
            cond = new Label("Two circles intersect?" + Collapes());
            ground.setAlignment(cond, Pos.CENTER);
            ground.setTop(cond);
        }
    }
}
