import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Arc;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Ellipse;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;

public class JavaFXShapes extends Application {

    CheckBox cbSmile;
    CheckBox cbRainbow;
    Circle face;
    Arc smile;
    Ellipse eye1;
    Ellipse eye2;
    Arc arc1;
    Arc arc2;
    Arc arc3;
    Arc arc4;
    Arc arc5;
    Arc arc6;
    Rotate rotate;
    Rectangle trunk1;
    Ellipse leaves1;
    Button closeBtn;
    RadioButton zero;
    RadioButton ninety;
    RadioButton oneeighty;
    RadioButton twoseventy;
    Pane pane;
    TextField tfCaption;
    Text textArea;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {
        //create borderpane
        BorderPane rootPane = new BorderPane();

        //create gridPane
        GridPane gridPane = new GridPane();
        gridPane.setAlignment(Pos.CENTER);
        gridPane.setHgap(10);
        gridPane.setVgap(10);

        //create pane for the shapes
        pane = new Pane();
        rootPane.getChildren().add(pane);

        //create checkbox
        Label background = new Label("Background");
        background.setFont(Font.font("Arial", FontPosture.REGULAR, 15));
        background.setPadding(new Insets(25, 25, 0, 50));

        cbRainbow = new CheckBox("Rainbow");
        cbSmile = new CheckBox("Smile");
        HBox checkBoxes = new HBox(10);
        checkBoxes.setPadding(new Insets(0, 25, 0,  25));
        checkBoxes.getChildren().addAll(cbRainbow, cbSmile);

        //create radioboxes
        Label rotation = new Label("Rotation");
        rotation.setFont(Font.font("Arial", FontPosture.REGULAR, 15));
        rotation.setPadding(new Insets(0, 0, 0, 60));

        zero = new RadioButton("0");
        ninety = new RadioButton("90");
        oneeighty = new RadioButton("180");
        twoseventy = new RadioButton("270");

        ToggleGroup rbGrp = new ToggleGroup();
        zero.setToggleGroup(rbGrp);
        ninety.setToggleGroup(rbGrp);
        oneeighty.setToggleGroup(rbGrp);
        twoseventy.setToggleGroup(rbGrp);

        HBox radioButtons1 = new HBox(5);
        radioButtons1.setPadding(new Insets(0, 0, 0,  45));
        HBox radioButtons2 = new HBox(5);
        radioButtons2.setPadding(new Insets(0, 0, 0,  35));
        radioButtons1.getChildren().addAll(zero, ninety);
        radioButtons2.getChildren().addAll(oneeighty, twoseventy);

        //create textbox and button for caption
        Label caption = new Label("Caption");
        caption.setFont(Font.font("Arial", FontPosture.REGULAR, 15));
        caption.setPadding(new Insets(0, 0, 0, 65));

        tfCaption = new TextField();
        tfCaption.setEditable(true);
        HBox tfCaptionBox = new HBox(5);
        tfCaptionBox.setPadding(new Insets(0, 0, 0, 15));
        tfCaptionBox.getChildren().add(tfCaption);

        Button changeTextBtn = new Button("Change Text");
        HBox ctbBox = new HBox(5);
        ctbBox.setPadding(new Insets(0, 0, 0, 50));
        ctbBox.getChildren().add(changeTextBtn);

        //create button for closing
        closeBtn = new Button("Close");
        HBox cbtnBox = new HBox(5);
        cbtnBox.getChildren().add(closeBtn);
        cbtnBox.setAlignment(Pos.BOTTOM_RIGHT);
        cbtnBox.setPadding(new Insets(0, 5, 5, 0));

        //create shapes
        Rectangle ground = new Rectangle(300,250,295,100);
        ground.setFill(Color.DARKGREEN);

        Rectangle sky = new Rectangle(300, 5, 295, 250);
        sky.setFill(Color.LIGHTBLUE);

        face = new Circle(450, 205, 50);
        face.setFill(Color.YELLOW);
        smile = new Arc(450, 205, 40, 40, 180, 180);
        smile.setFill(Color.BLACK);
        eye1 = new Ellipse(430, 185, 10, 15);
        eye1.setFill(Color.BLACK);
        eye2 = new Ellipse(470, 185, 10, 15);
        eye2.setFill(Color.BLACK);
        face.setVisible(false);
        smile.setVisible(false);
        eye1.setVisible(false);
        eye2.setVisible(false);

        //Rainbow
        arc1 = new Arc(450,220,200,150,30,105);
        arc2 = new Arc(450,217,202,150,30,105);
        arc3 = new Arc(450,214,204,150,30,105);
        arc4 = new Arc(450,211,206,150,30,105);
        arc5 = new Arc(450,208,208,150,30,105);
        arc6 = new Arc(450,205,210,150,30,105);
        Arc[] arcs = {arc1,arc2,arc3,arc4,arc5,arc6};
        for (Arc a: arcs){
            a.setFill(Color.TRANSPARENT);
            a.setStrokeWidth(4);
            a.setVisible(false);
        }
        arc1.setStroke(Color.RED);
        arc2.setStroke(Color.ORANGE);
        arc3.setStroke(Color.YELLOW);
        arc4.setStroke(Color.GREEN);
        arc5.setStroke(Color.DARKBLUE);
        arc6.setStroke(Color.PURPLE);

        trunk1 = new Rectangle(340,220,20,100);
        trunk1.setFill(Color.SADDLEBROWN);

        leaves1 = new Ellipse(350,200,30,50);
        leaves1.setFill(Color.rgb(30,120,80));
        leaves1.setStroke(Color.rgb(30,120,80));
        leaves1.setStrokeWidth(10);

        //implementation
        cbRainbow.setOnAction(new rbEventHandler());    //make rainbow visible/notvisible
        cbSmile.setOnAction(new smileEventHandler());      //make smiley face visible/not visible

        zero.setOnAction(new rotateRbEventHandler());   //rotate
        ninety.setOnAction(new rotateRbEventHandler());
        oneeighty.setOnAction(new rotateRbEventHandler());
        twoseventy.setOnAction(new rotateRbEventHandler());

        changeTextBtn.setOnAction(new changeTextBtnEventHandler()); //display text

        closeBtn.setOnAction(new closeBtnEventHandler());       //close button

        //adding onto panes
        gridPane.addRow(0, background);
        gridPane.addRow(1, checkBoxes);
        gridPane.addRow(5, rotation);
        gridPane.addRow(6, radioButtons1);
        gridPane.addRow(7, radioButtons2);
        gridPane.addRow(11, caption);
        gridPane.addRow(12, tfCaptionBox);
        gridPane.addRow(13, ctbBox);

        pane.getChildren().addAll(ground, sky, face, smile, eye1, eye2,trunk1, leaves1, arc1, arc2, arc3, arc4, arc5, arc6);
        rootPane.setLeft(gridPane);
        rootPane.setBottom(cbtnBox);

        //creates stage and scene
        Scene scene = new Scene(rootPane, 600, 400);
        stage.setTitle("JavaFxTree");
        stage.setScene(scene);
        stage.show();
    }

    class smileEventHandler implements EventHandler<ActionEvent> {
        @Override
        public void handle(ActionEvent actionEvent) {
            if(cbSmile.isSelected()) {
                face.setVisible(true);
                smile.setVisible(true);
                eye1.setVisible(true);
                eye2.setVisible(true);
            }
            else if(!cbSmile.isSelected()){
                face.setVisible(false);
                smile.setVisible(false);
                eye1.setVisible(false);
                eye2.setVisible(false);
            }
        }
    }

    class rbEventHandler implements EventHandler<ActionEvent> {
        @Override
        public void handle(ActionEvent actionEvent) {
            if(cbRainbow.isSelected()) {
                arc1.setVisible(true);
                arc2.setVisible(true);
                arc3.setVisible(true);
                arc4.setVisible(true);
                arc5.setVisible(true);
                arc6.setVisible(true);
            }
            else if(!cbSmile.isSelected()) {
                arc1.setVisible(false);
                arc2.setVisible(false);
                arc3.setVisible(false);
                arc4.setVisible(false);
                arc5.setVisible(false);
                arc6.setVisible(false);
            }
        }
    }

    class closeBtnEventHandler implements EventHandler<ActionEvent> {
        @Override
        public void handle(ActionEvent actionEvent) {
            final Node source = (Node) actionEvent.getSource();
            final Stage stage = (Stage) source.getScene().getWindow();
            stage.close();
        }
    }

    class rotateRbEventHandler implements EventHandler<ActionEvent> {
        @Override
        public void handle(ActionEvent actionEvent) {
            if(zero.isSelected()) {
                rotate = new Rotate(0,340,250);
            }
            else if(ninety.isSelected()) {
                rotate = new Rotate(90,340,250);
            }
            else if(oneeighty.isSelected()) {
                rotate = new Rotate(180,340,250);
            }
            else if(twoseventy.isSelected()) {
                rotate = new Rotate(270,340,250);
            }
            trunk1.getTransforms().clear();
            leaves1.getTransforms().clear();
            trunk1.getTransforms().add(rotate);
            leaves1.getTransforms().add(rotate);
        }
    }

    class changeTextBtnEventHandler implements  EventHandler<ActionEvent> {
        @Override
        public void handle(ActionEvent actionEvent) {
            if (textArea != null){
                pane.getChildren().remove(textArea);
            }

            textArea = new Text(10,300,tfCaption.getText());
            textArea.setFont(Font.font("Arial",FontWeight.BOLD,25));
            textArea.setFill(Color.WHITE);
            textArea.setX(350);
            pane.getChildren().add(textArea);
        }
    }
}
